// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock/mock_client.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	application "github.com/argoproj/argo-cd/v2/pkg/apiclient/application"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	client "github.com/toyamagu-2021/argocd-mcp-server/internal/argocd/client"
	gomock "go.uber.org/mock/gomock"
)

// MockLogStream is a mock of LogStream interface.
type MockLogStream struct {
	ctrl     *gomock.Controller
	recorder *MockLogStreamMockRecorder
	isgomock struct{}
}

// MockLogStreamMockRecorder is the mock recorder for MockLogStream.
type MockLogStreamMockRecorder struct {
	mock *MockLogStream
}

// NewMockLogStream creates a new mock instance.
func NewMockLogStream(ctrl *gomock.Controller) *MockLogStream {
	mock := &MockLogStream{ctrl: ctrl}
	mock.recorder = &MockLogStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogStream) EXPECT() *MockLogStreamMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockLogStream) Recv() (*application.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*application.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLogStreamMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLogStream)(nil).Recv))
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInterface)(nil).Close))
}

// CreateApplication mocks base method.
func (m *MockInterface) CreateApplication(ctx context.Context, app *v1alpha1.Application, upsert bool) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", ctx, app, upsert)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockInterfaceMockRecorder) CreateApplication(ctx, app, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockInterface)(nil).CreateApplication), ctx, app, upsert)
}

// CreateCluster mocks base method.
func (m *MockInterface) CreateCluster(ctx context.Context, cluster *v1alpha1.Cluster, upsert bool) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, cluster, upsert)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockInterfaceMockRecorder) CreateCluster(ctx, cluster, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockInterface)(nil).CreateCluster), ctx, cluster, upsert)
}

// CreateProject mocks base method.
func (m *MockInterface) CreateProject(ctx context.Context, project *v1alpha1.AppProject, upsert bool) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, project, upsert)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockInterfaceMockRecorder) CreateProject(ctx, project, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockInterface)(nil).CreateProject), ctx, project, upsert)
}

// CreateRepository mocks base method.
func (m *MockInterface) CreateRepository(ctx context.Context, repo *v1alpha1.Repository, upsert bool) (*v1alpha1.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, repo, upsert)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockInterfaceMockRecorder) CreateRepository(ctx, repo, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockInterface)(nil).CreateRepository), ctx, repo, upsert)
}

// DeleteApplication mocks base method.
func (m *MockInterface) DeleteApplication(ctx context.Context, name string, cascade bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", ctx, name, cascade)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockInterfaceMockRecorder) DeleteApplication(ctx, name, cascade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockInterface)(nil).DeleteApplication), ctx, name, cascade)
}

// DeleteCluster mocks base method.
func (m *MockInterface) DeleteCluster(ctx context.Context, server string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockInterfaceMockRecorder) DeleteCluster(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockInterface)(nil).DeleteCluster), ctx, server)
}

// DeleteProject mocks base method.
func (m *MockInterface) DeleteProject(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockInterfaceMockRecorder) DeleteProject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockInterface)(nil).DeleteProject), ctx, name)
}

// DeleteRepository mocks base method.
func (m *MockInterface) DeleteRepository(ctx context.Context, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockInterfaceMockRecorder) DeleteRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockInterface)(nil).DeleteRepository), ctx, repo)
}

// GetApplication mocks base method.
func (m *MockInterface) GetApplication(ctx context.Context, name string) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockInterfaceMockRecorder) GetApplication(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockInterface)(nil).GetApplication), ctx, name)
}

// GetApplicationEvents mocks base method.
func (m *MockInterface) GetApplicationEvents(ctx context.Context, name, resourceNamespace, resourceName, resourceUID, appNamespace, project string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationEvents", ctx, name, resourceNamespace, resourceName, resourceUID, appNamespace, project)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationEvents indicates an expected call of GetApplicationEvents.
func (mr *MockInterfaceMockRecorder) GetApplicationEvents(ctx, name, resourceNamespace, resourceName, resourceUID, appNamespace, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationEvents", reflect.TypeOf((*MockInterface)(nil).GetApplicationEvents), ctx, name, resourceNamespace, resourceName, resourceUID, appNamespace, project)
}

// GetApplicationLogs mocks base method.
func (m *MockInterface) GetApplicationLogs(ctx context.Context, name, podName, container, namespace, resourceName, kind, group string, tailLines int64, sinceSeconds *int64, follow, previous bool, filter, appNamespace, project string) (client.LogStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLogs", ctx, name, podName, container, namespace, resourceName, kind, group, tailLines, sinceSeconds, follow, previous, filter, appNamespace, project)
	ret0, _ := ret[0].(client.LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLogs indicates an expected call of GetApplicationLogs.
func (mr *MockInterfaceMockRecorder) GetApplicationLogs(ctx, name, podName, container, namespace, resourceName, kind, group, tailLines, sinceSeconds, follow, previous, filter, appNamespace, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLogs", reflect.TypeOf((*MockInterface)(nil).GetApplicationLogs), ctx, name, podName, container, namespace, resourceName, kind, group, tailLines, sinceSeconds, follow, previous, filter, appNamespace, project)
}

// GetApplicationManifests mocks base method.
func (m *MockInterface) GetApplicationManifests(ctx context.Context, name, revision string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationManifests", ctx, name, revision)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationManifests indicates an expected call of GetApplicationManifests.
func (mr *MockInterfaceMockRecorder) GetApplicationManifests(ctx, name, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationManifests", reflect.TypeOf((*MockInterface)(nil).GetApplicationManifests), ctx, name, revision)
}

// GetApplicationSet mocks base method.
func (m *MockInterface) GetApplicationSet(ctx context.Context, name string) (*v1alpha1.ApplicationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationSet", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.ApplicationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationSet indicates an expected call of GetApplicationSet.
func (mr *MockInterfaceMockRecorder) GetApplicationSet(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationSet", reflect.TypeOf((*MockInterface)(nil).GetApplicationSet), ctx, name)
}

// GetCluster mocks base method.
func (m *MockInterface) GetCluster(ctx context.Context, server string) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, server)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInterfaceMockRecorder) GetCluster(ctx, server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInterface)(nil).GetCluster), ctx, server)
}

// GetProject mocks base method.
func (m *MockInterface) GetProject(ctx context.Context, name string) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockInterfaceMockRecorder) GetProject(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockInterface)(nil).GetProject), ctx, name)
}

// GetRepository mocks base method.
func (m *MockInterface) GetRepository(ctx context.Context, repo string) (*v1alpha1.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, repo)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockInterfaceMockRecorder) GetRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockInterface)(nil).GetRepository), ctx, repo)
}

// ListApplicationSets mocks base method.
func (m *MockInterface) ListApplicationSets(ctx context.Context, project string) (*v1alpha1.ApplicationSetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationSets", ctx, project)
	ret0, _ := ret[0].(*v1alpha1.ApplicationSetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationSets indicates an expected call of ListApplicationSets.
func (mr *MockInterfaceMockRecorder) ListApplicationSets(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSets", reflect.TypeOf((*MockInterface)(nil).ListApplicationSets), ctx, project)
}

// ListApplications mocks base method.
func (m *MockInterface) ListApplications(ctx context.Context, selector string) (*v1alpha1.ApplicationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", ctx, selector)
	ret0, _ := ret[0].(*v1alpha1.ApplicationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockInterfaceMockRecorder) ListApplications(ctx, selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockInterface)(nil).ListApplications), ctx, selector)
}

// ListClusters mocks base method.
func (m *MockInterface) ListClusters(ctx context.Context) (*v1alpha1.ClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx)
	ret0, _ := ret[0].(*v1alpha1.ClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockInterfaceMockRecorder) ListClusters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockInterface)(nil).ListClusters), ctx)
}

// ListProjects mocks base method.
func (m *MockInterface) ListProjects(ctx context.Context) (*v1alpha1.AppProjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", ctx)
	ret0, _ := ret[0].(*v1alpha1.AppProjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockInterfaceMockRecorder) ListProjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockInterface)(nil).ListProjects), ctx)
}

// ListRepositories mocks base method.
func (m *MockInterface) ListRepositories(ctx context.Context) (*v1alpha1.RepositoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx)
	ret0, _ := ret[0].(*v1alpha1.RepositoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockInterfaceMockRecorder) ListRepositories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockInterface)(nil).ListRepositories), ctx)
}

// RollbackApplication mocks base method.
func (m *MockInterface) RollbackApplication(ctx context.Context, name string, id int64) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackApplication", ctx, name, id)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackApplication indicates an expected call of RollbackApplication.
func (mr *MockInterfaceMockRecorder) RollbackApplication(ctx, name, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackApplication", reflect.TypeOf((*MockInterface)(nil).RollbackApplication), ctx, name, id)
}

// SyncApplication mocks base method.
func (m *MockInterface) SyncApplication(ctx context.Context, name, revision string, prune, dryRun bool) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncApplication", ctx, name, revision, prune, dryRun)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncApplication indicates an expected call of SyncApplication.
func (mr *MockInterfaceMockRecorder) SyncApplication(ctx, name, revision, prune, dryRun any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncApplication", reflect.TypeOf((*MockInterface)(nil).SyncApplication), ctx, name, revision, prune, dryRun)
}

// UpdateApplication mocks base method.
func (m *MockInterface) UpdateApplication(ctx context.Context, app *v1alpha1.Application) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", ctx, app)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockInterfaceMockRecorder) UpdateApplication(ctx, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockInterface)(nil).UpdateApplication), ctx, app)
}

// UpdateCluster mocks base method.
func (m *MockInterface) UpdateCluster(ctx context.Context, cluster *v1alpha1.Cluster) (*v1alpha1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, cluster)
	ret0, _ := ret[0].(*v1alpha1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockInterfaceMockRecorder) UpdateCluster(ctx, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockInterface)(nil).UpdateCluster), ctx, cluster)
}

// UpdateProject mocks base method.
func (m *MockInterface) UpdateProject(ctx context.Context, project *v1alpha1.AppProject) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, project)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockInterfaceMockRecorder) UpdateProject(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockInterface)(nil).UpdateProject), ctx, project)
}

// UpdateRepository mocks base method.
func (m *MockInterface) UpdateRepository(ctx context.Context, repo *v1alpha1.Repository) (*v1alpha1.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepository", ctx, repo)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockInterfaceMockRecorder) UpdateRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockInterface)(nil).UpdateRepository), ctx, repo)
}
